---
kind: CronJob
apiVersion: batch/v1
metadata:
  name: {{cookiecutter.object_name}}
  namespace:  {{ "{{" }} {{cookiecutter.var_prefix}}_namespace {{ "}}" }}
spec:
  schedule: '{{ "{{" }} {{cookiecutter.var_prefix}}_schedule {{ "}}" }}'
  successfulJobsHistoryLimit: 1
  startingDeadlineSeconds: 180
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            name: {{cookiecutter.object_name}}
        spec:
          serviceAccountName: {{cookiecutter.object_name}}

          # A 'preferred' (not guaranteed)
          # node selection affinity...
          affinity:
            nodeAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 1
              preference:
                matchExpressions:
                - key: informaticsmatters.com/purpose-{{ "{{" }} {{cookiecutter.var_prefix}}_node_purpose {{ "}}" }}
                  operator: Exists

          containers:
          - name: {{cookiecutter.object_name}}
            image: {{ "{{" }} {{cookiecutter.var_prefix}}_image_name {{ "}}" }}:{{ "{{" }} {{cookiecutter.var_prefix}}_image_tag {{ "}}" }}
{{ "{%" }} if {{cookiecutter.var_prefix}}_image_tag in ['latest', 'stable'] {{ "%}" }}
            imagePullPolicy: Always
{{ "{%" }} else {{ "%}" }}
            imagePullPolicy: IfNotPresent
{{ "{%" }} endif {{ "%}" }}
            # The default termination log (here for clarity)
            # But also fallback to stdout logs on error
            # if there is no termination log.
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: FallbackToLogsOnError
            env:
            - name: EXAMPLE_ENV
              value: '1'
            resources:
              requests:
                cpu: {{ "{{" }} {{cookiecutter.var_prefix}}_cpu_request {{ "}}" }}
                memory: {{ "{{" }} {{cookiecutter.var_prefix}}_mem_request {{ "}}" }}
{{ "{%" }} if {{cookiecutter.var_prefix}}_cpu_limit or {{cookiecutter.var_prefix}}_mem_limit {{ "%}" }}
              limits:
{{ "{%" }} if {{cookiecutter.var_prefix}}_cpu_limit {{ "%}" }}
                cpu: {{ "{{" }} {{cookiecutter.var_prefix}}_cpu_limit {{ "}}" }}
{{ "{%" }} endif {{ "%}" }}
{{ "{%" }} if {{cookiecutter.var_prefix}}_mem_limit {{ "%}" }}
                memory: {{ "{{" }} {{cookiecutter.var_prefix}}_mem_limit {{ "}}" }}
{{ "{%" }} endif {{ "%}" }}
{{ "{%" }} endif {{ "%}" }}
{%- if cookiecutter.add_pvc|lower == 'y' %}
            volumeMounts:
            - mountPath: /volume
              name: pvc-volume
{% endif %}

{% if cookiecutter.add_pvc|lower == 'y' %}
          volumes:
          - name: pvc-volume
            persistentVolumeClaim:
              claimName: {{cookiecutter.object_name}}
{% endif %}

{% if cookiecutter.add_secret|lower == 'y' %}
          imagePullSecrets:
          - name: {{cookiecutter.object_name}}
{% endif %}

          restartPolicy: Never
